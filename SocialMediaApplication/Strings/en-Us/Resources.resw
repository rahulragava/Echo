<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountCreation.Text" xml:space="preserve">
    <value>Create an account</value>
  </data>
  <data name="All.Text" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="And.Text" xml:space="preserve">
    <value> And</value>
  </data>
  <data name="CallUser.Text" xml:space="preserve">
    <value>Call me</value>
  </data>
  <data name="Casual" xml:space="preserve">
    <value>Casual</value>
  </data>
  <data name="ChoiceEmptyNotification" xml:space="preserve">
    <value>Choice field cannot be empty!</value>
  </data>
  <data name="ChoiceEnter.PlaceholderText" xml:space="preserve">
    <value>Enter your choice</value>
  </data>
  <data name="Choices.Header" xml:space="preserve">
    <value>Choices</value>
  </data>
  <data name="Comment.Text" xml:space="preserve">
    <value>Comments</value>
  </data>
  <data name="CommentDeletion" xml:space="preserve">
    <value>Comment deletion</value>
  </data>
  <data name="CommentEnter.PlaceholderText" xml:space="preserve">
    <value>type your comment here ...</value>
  </data>
  <data name="CommentRemovalWarning" xml:space="preserve">
    <value>The Comment about to be removed cannot be retrieved!
Are you sure, you want to delete ?</value>
  </data>
  <data name="Create.Content" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="CreateAccount.Text" xml:space="preserve">
    <value>Create Account</value>
  </data>
  <data name="Created.Text" xml:space="preserve">
    <value>echo user since, </value>
  </data>
  <data name="Discard.Content" xml:space="preserve">
    <value>Discard</value>
  </data>
  <data name="DoNotSpecify" xml:space="preserve">
    <value>Do not specify</value>
  </data>
  <data name="EditPost.Text" xml:space="preserve">
    <value>Edit Post</value>
  </data>
  <data name="Education.Text" xml:space="preserve">
    <value>Studied At</value>
  </data>
  <data name="Email.Text" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Every.Text" xml:space="preserve">
    <value>All</value>
    <comment>Shows everyones reaction</comment>
  </data>
  <data name="Fancy" xml:space="preserve">
    <value>Fancy</value>
  </data>
  <data name="Feed.Content" xml:space="preserve">
    <value>Feeds</value>
  </data>
  <data name="Female" xml:space="preserve">
    <value>Female</value>
  </data>
  <data name="FirstName.Text" xml:space="preserve">
    <value>First name</value>
  </data>
  <data name="Follow.Content" xml:space="preserve">
    <value>Follow</value>
  </data>
  <data name="Follower.Text" xml:space="preserve">
    <value>Followers</value>
  </data>
  <data name="Following.Text" xml:space="preserve">
    <value>Followings</value>
  </data>
  <data name="Font.Header" xml:space="preserve">
    <value>Font</value>
  </data>
  <data name="Gender.text" xml:space="preserve">
    <value>Gender</value>
  </data>
  <data name="HaveAccount.Text" xml:space="preserve">
    <value>Already have an account ? </value>
  </data>
  <data name="InvalidMail" xml:space="preserve">
    <value>Invalid mail</value>
  </data>
  <data name="InvalidPassword" xml:space="preserve">
    <value>Password must contain atleast 8 character</value>
  </data>
  <data name="InvalidRetypePassword" xml:space="preserve">
    <value>Retyped password is not same as password</value>
  </data>
  <data name="JustNow" xml:space="preserve">
    <value>just now </value>
  </data>
  <data name="LastName.Text" xml:space="preserve">
    <value>Last name</value>
  </data>
  <data name="Loading.Text" xml:space="preserve">
    <value>Please wait till we fetch the echoes :)</value>
  </data>
  <data name="Login.Content" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="LogOut.Content" xml:space="preserve">
    <value>Log out</value>
  </data>
  <data name="MailEmpty" xml:space="preserve">
    <value>Mail cannot be empty</value>
  </data>
  <data name="MailExistNotification" xml:space="preserve">
    <value>already existing mail. try login</value>
  </data>
  <data name="Male" xml:space="preserve">
    <value>Male</value>
  </data>
  <data name="MaritalStatus.Text" xml:space="preserve">
    <value>Marital status</value>
  </data>
  <data name="Married" xml:space="preserve">
    <value>Married</value>
  </data>
  <data name="NewToOld.Text" xml:space="preserve">
    <value>Newest to oldest</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="OldToNew.Text" xml:space="preserve">
    <value>Oldest to Newest</value>
  </data>
  <data name="OneHourAgo" xml:space="preserve">
    <value>an hour ago</value>
  </data>
  <data name="Others.Text" xml:space="preserve">
    <value> others</value>
  </data>
  <data name="Password.Text" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordEmpty" xml:space="preserve">
    <value>Password cannot be empty</value>
  </data>
  <data name="Place.Text" xml:space="preserve">
    <value>Lives in</value>
  </data>
  <data name="PollPost.Text" xml:space="preserve">
    <value>Poll post</value>
  </data>
  <data name="PollPostCreatedNotification" xml:space="preserve">
    <value>Poll post is Successfully Created!</value>
  </data>
  <data name="PollPostCreation.Text" xml:space="preserve">
    <value>Create a poll post</value>
  </data>
  <data name="Post.Content" xml:space="preserve">
    <value>Post</value>
  </data>
  <data name="PostContentEmptyNotification" xml:space="preserve">
    <value>Post content cannot be empty!</value>
  </data>
  <data name="PostDeletion" xml:space="preserve">
    <value>Post deletion</value>
  </data>
  <data name="PostQuestionEmptyNotification" xml:space="preserve">
    <value>Poll question cannot be empty!</value>
  </data>
  <data name="PostRemovalWarning" xml:space="preserve">
    <value>The post about to be removed cannot be retrieved! 
Are you sure, you want to delete ?</value>
  </data>
  <data name="Posts.Text" xml:space="preserve">
    <value>Posts</value>
  </data>
  <data name="PostTitle.PlaceholderText" xml:space="preserve">
    <value>Post title</value>
  </data>
  <data name="PostTitleEmptyNotification" xml:space="preserve">
    <value>Post title cannot be empty!</value>
  </data>
  <data name="Profile.Content" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="Reply.Content" xml:space="preserve">
    <value>Reply</value>
  </data>
  <data name="ReplyEnter.PlaceholderText" xml:space="preserve">
    <value>type your reply here ... </value>
  </data>
  <data name="RetypePassword.Text" xml:space="preserve">
    <value>Retype Password</value>
  </data>
  <data name="Save.Content" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SaveChange.Content" xml:space="preserve">
    <value>Save Changes</value>
  </data>
  <data name="Schooling.Text" xml:space="preserve">
    <value>Education</value>
  </data>
  <data name="Search.PlaceholderText" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SearchContent.Content" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SignUp.Content" xml:space="preserve">
    <value>SignUp</value>
  </data>
  <data name="Simple" xml:space="preserve">
    <value>Simple</value>
  </data>
  <data name="SometimeAgo" xml:space="preserve">
    <value>sometimes ago</value>
  </data>
  <data name="TextPost.Text" xml:space="preserve">
    <value>Text post</value>
  </data>
  <data name="TextPostCreatedNotification" xml:space="preserve">
    <value>Text post is Successfully Created!</value>
  </data>
  <data name="TextPostCreation.Text" xml:space="preserve">
    <value>Create a text post</value>
  </data>
  <data name="Today" xml:space="preserve">
    <value>today</value>
  </data>
  <data name="Type.Text" xml:space="preserve">
    <value>Type : </value>
  </data>
  <data name="Typing.PlaceholderText" xml:space="preserve">
    <value>Start typing ...</value>
  </data>
  <data name="UnFollow.Content" xml:space="preserve">
    <value>UnFollow</value>
  </data>
  <data name="Unmarried" xml:space="preserve">
    <value>Unmarried</value>
  </data>
  <data name="UserName.Text" xml:space="preserve">
    <value>User name</value>
  </data>
  <data name="UserNameExistNotification" xml:space="preserve">
    <value>Already User with this UserName Exist! Try Something new</value>
  </data>
  <data name="UserNotExist" xml:space="preserve">
    <value>No such user exist !</value>
  </data>
  <data name="UserThought" xml:space="preserve">
    <value>Whats on your mind, </value>
  </data>
  <data name="Vote.Text" xml:space="preserve">
    <value>Votes</value>
  </data>
  <data name="Votes.Text" xml:space="preserve">
    <value>Votes</value>
  </data>
  <data name="Welcome.Text" xml:space="preserve">
    <value>Welcome back  !</value>
  </data>
  <data name="Work.Text" xml:space="preserve">
    <value>Currently working as </value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="Yesterday" xml:space="preserve">
    <value>yesterday</value>
  </data>
  <data name="You.Text" xml:space="preserve">
    <value> you</value>
  </data>
</root>